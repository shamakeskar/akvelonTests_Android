<?xml version="1.0" encoding="UTF-8"?>
<Review id="vasily.gancharov">
  <ReviewIssue id="H77G6R4X">
    <ReviewIssueMeta>
      <CreationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 14:45:18:177 MSK</CreationDate>
      <LastModificationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 14:46:04:434 MSK</LastModificationDate>
    </ReviewIssueMeta>
    <ReviewerId>alexander.makarov</ReviewerId>
    <AssignedTo>alexander.makarov</AssignedTo>
    <File line="175">src/com/linkedin/android/utils/WaitActions.java</File>
    <Type>item.type.label.other</Type>
    <Severity>item.severity.label.normal</Severity>
    <Summary>waitForText</Summary>
    <Description>public static void waitForText(String textToWait, String errorMesage) {
        final int defaultMinimumNumberOfMatches = 1;

        if (null == textToWait || null == errorMesage) {
            return;
        }
        Solo solo = DataProvider.getInstance().getSolo();
        boolean isTextPresented = solo.waitForText(textToWait, defaultMinimumNumberOfMatches,
                DataProvider.WAIT_DELAY_DEFAULT);
        Assert.assertTrue(errorMesage, isTextPresented);
    }</Description>
    <Annotation></Annotation>
    <Revision></Revision>
    <Resolution>item.label.unset</Resolution>
    <Status>item.status.label.open</Status>
  </ReviewIssue>
  <ReviewIssue id="H77GJ904">
    <ReviewIssueMeta>
      <CreationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 14:55:01:204 MSK</CreationDate>
      <LastModificationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 14:55:09:664 MSK</LastModificationDate>
    </ReviewIssueMeta>
    <ReviewerId>alexander.makarov</ReviewerId>
    <AssignedTo>alexander.makarov</AssignedTo>
    <File line="22">src/com/linkedin/android/tests/data/ViewIdName.java</File>
    <Type>item.type.label.other</Type>
    <Severity>item.severity.label.normal</Severity>
    <Summary>ViewIdName was changed from enum to class</Summary>
    <Description>ViewIdName was changed from enum to class. Now all resource ids will be stored in screens in which they used.</Description>
    <Annotation></Annotation>
    <Revision></Revision>
    <Resolution>item.label.unset</Resolution>
    <Status>item.status.label.open</Status>
  </ReviewIssue>
  <ReviewIssue id="H77GY69O">
    <ReviewIssueMeta>
      <CreationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 15:06:37:500 MSK</CreationDate>
      <LastModificationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 15:06:57:879 MSK</LastModificationDate>
    </ReviewIssueMeta>
    <ReviewerId>alexander.makarov</ReviewerId>
    <AssignedTo>alexander.makarov</AssignedTo>
    <File line="28">src/com/linkedin/android/screens/common/ScreenExpose.java</File>
    <Type>item.type.label.other</Type>
    <Severity>item.severity.label.normal</Severity>
    <Summary>ScreenExpose</Summary>
    <Description>Please review all methods from this class.</Description>
    <Annotation></Annotation>
    <Revision></Revision>
    <Resolution>item.label.unset</Resolution>
    <Status>item.status.label.open</Status>
  </ReviewIssue>
  <ReviewIssue id="H77HQZ0X">
    <ReviewIssueMeta>
      <CreationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 15:29:01:137 MSK</CreationDate>
      <LastModificationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 15:29:40:722 MSK</LastModificationDate>
    </ReviewIssueMeta>
    <ReviewerId>alexander.makarov</ReviewerId>
    <AssignedTo>alexander.makarov</AssignedTo>
    <File line="34">src/com/linkedin/android/tests/data/Id.java</File>
    <Type>item.type.label.other</Type>
    <Severity>item.severity.label.normal</Severity>
    <Summary>getViewByName was refactored</Summary>
    <Description>public static View getViewByName(ViewIdName idName) {
        Solo solo = DataProvider.getInstance().getSolo();
        int viewId = getIdByName(idName);
        View view = solo.getView(viewId);
        if (null == view) {
            Logger.logElements(true, true);
            Assert.fail("Can't get View by name: " + idName);
        }
        return view;
    }</Description>
    <Annotation></Annotation>
    <Revision></Revision>
    <Resolution>item.label.unset</Resolution>
    <Status>item.status.label.open</Status>
  </ReviewIssue>
  <ReviewIssue id="H77HS811">
    <ReviewIssueMeta>
      <CreationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 15:29:59:461 MSK</CreationDate>
      <LastModificationDate format="yyyy-MM-dd :: HH:mm:ss:SSS z">2012-09-17 :: 15:30:21:065 MSK</LastModificationDate>
    </ReviewIssueMeta>
    <ReviewerId>alexander.makarov</ReviewerId>
    <AssignedTo>alexander.makarov</AssignedTo>
    <File line="52">src/com/linkedin/android/tests/data/Id.java</File>
    <Type>item.type.label.other</Type>
    <Severity>item.severity.label.normal</Severity>
    <Summary>getIdByName was refactored</Summary>
    <Description>private static int getIdByName(ViewIdName idName) {
        Solo solo = DataProvider.getInstance().getSolo();
        Activity currentActivity = solo.getCurrentActivity();
        Assert.assertNotNull("There is no current activity", currentActivity);

        Resources currentResources = currentActivity.getResources();
        Assert.assertNotNull("There is no resources on current activity", currentResources);

        int id = currentResources.getIdentifier(idName.toString(), null, null);

        if (id &lt;= 0) {
            Logger.logElements(true, true);
            Assert.fail("Can't get ID by name: " + idName);
        }
        return id;
    }</Description>
    <Annotation></Annotation>
    <Revision></Revision>
    <Resolution>item.label.unset</Resolution>
    <Status>item.status.label.open</Status>
  </ReviewIssue>
</Review>