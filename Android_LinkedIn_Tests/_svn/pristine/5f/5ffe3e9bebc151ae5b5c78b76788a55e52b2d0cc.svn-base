package com.linkedin.android.screens.common;

import junit.framework.Assert;
import android.widget.Button;
import android.widget.ImageView;

import com.linkedin.android.screens.base.BaseScreen;
import com.linkedin.android.utils.HardwareActions;
import com.linkedin.android.utils.Logger;
import com.linkedin.android.utils.WaitActions;
import com.linkedin.android.utils.viewUtils.ViewUtils;

/**
 * Class for 'New Message' screen.
 * 
 * @author nikita.chehomov
 * @created Aug 22, 2012 3:28:23 PM
 */
public class ScreenNewMessage extends BaseScreen {
    // CONSTANTS ------------------------------------------------------------
    public static final String ACTIVITY_CLASSNAME = "com.linkedin.android.messages.MessageComposeActivity";
    public static final String ACTIVITY_SHORT_CLASSNAME = "MessageComposeActivity";

    // PROPERTIES -----------------------------------------------------------

    // CONSTRUCTORS ---------------------------------------------------------
    public ScreenNewMessage() {
        super(ACTIVITY_CLASSNAME);
    }

    // METHODS --------------------------------------------------------------
    @Override
    public void verify() {
        Assert.assertTrue("'New Message' label is not presented",
                getSolo().waitForText("New Message"));

        Button sendButton = getSolo().getButton(0);
        ImageView addConnectionButton = getSolo().getImage(0);

        Assert.assertNotNull("'Send' button is not presented", sendButton);
        Assert.assertNotNull("'Add' button is not presented", addConnectionButton);

        HardwareActions.takeCurrentActivityScreenshot("New Message screen.");
    }

    @Override
    public void waitForMe() {
        WaitActions.waitMultiplyActivities(new String[] { ACTIVITY_SHORT_CLASSNAME });
    }

    @Override
    public String getActivityShortClassName() {
        return ACTIVITY_SHORT_CLASSNAME;
    }

    /**
     * Taps on 'Send' button.
     */
    public void tapOnSendButton() {
        Button sendButton = getSolo().getButton(0);
        verifyTwoToastsStart("Sending message", "Message sent");
        ViewUtils.tapOnView(sendButton, "'Send' button");
        verifyTwoToastsEnd();
    }

    /**
     * Taps on 'Add Connections' button.
     */
    public void tapOnAddConnectionsButton() {
        ImageView addConnection = getSolo().getImage(0);
        ViewUtils.tapOnView(addConnection, "'Add Connection' button");
    }

    /**
     * Opens 'Add Connections' screen.
     * 
     * @return {@code AddConnectionsScreen} with just opened 'Add Connections'
     *         screen.
     */
    public ScreenAddConnections openAddConnectionsScreen() {
        tapOnAddConnectionsButton();
        return new ScreenAddConnections();
    }

    /**
     * Types subject of your message.
     * 
     * @return subject
     */
    public String typeRandomSubject() {
        String subject = "Subject " + Math.random();
        Assert.assertNotNull("Subject field is not present.", getSolo().getEditText(1));

        Logger.i("Typing random subject: '" + subject + "'");
        getSolo().enterText(1, subject);

        return subject;
    }

    /**
     * Types random message.
     * 
     * @return message
     */
    public String typeRandomMessage() {
        String message = "Test message " + Math.random();
        Assert.assertNotNull("Message field is not present.", getSolo().getEditText(2));

        Logger.i("Typing random message: '" + message + "'");
        getSolo().enterText(2, message);

        return message;
    }

    /**
     * Make To Field Active.
     */
    public void makeToFieldActive() {
        final int TO_TEXT_EDIT_INDEX = 0;
        Assert.assertNotNull("'To' field is not present.", getSolo()
                .getEditText(TO_TEXT_EDIT_INDEX));
        getSolo().enterText(TO_TEXT_EDIT_INDEX, " ");
    }

    /**
     * Types message.
     * 
     * @param message
     *            is text which you want to sent.
     * @return message body.
     */
    public String typeMessageBody(String message) {
        Assert.assertNotNull("Message field is not present.", getSolo().getEditText(2));

        Logger.i("Typing message: '" + message + "'");
        getSolo().enterText(2, message);
        return message;
    }

    /**
     * Types subject of message.
     * 
     * @param subject
     *            is subject of your message.
     * @return subject of message.
     */
    public String typeMessageTitle(String subject) {
        Assert.assertNotNull("Subject field is not present.", getSolo().getEditText(1));

        Logger.i("Typing subject: '" + subject + "'");
        getSolo().enterText(1, subject);
        return subject;
    }
}
