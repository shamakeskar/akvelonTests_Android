package com.linkedin.android.screens.common;

import junit.framework.Assert;

import android.widget.TextView;

import com.jayway.android.robotium.solo.Solo;
import com.linkedin.android.screens.base.BaseINScreen;
import com.linkedin.android.screens.inbox.ScreenInbox;
import com.linkedin.android.screens.more.ScreenGroupsAndMore;
import com.linkedin.android.screens.updates.ScreenUpdates;
import com.linkedin.android.screens.you.ScreenYou;
import com.linkedin.android.tests.data.DataProvider;
import com.linkedin.android.utils.Logger;

public class ScreenExpose {

    // CONSTANTS ------------------------------------------------------------

    private static final String UPDATES_LABEL = "Updates";
    private static final String YOU_LABEL = "You";
    private static final String MESSAGES_LABEL = "Messages";
    private static final String GROUPS_AND_MORE_LABEL = "Groups & More";

    // PROPERTIES -----------------------------------------------------------
    private BaseINScreen screenFromWhichExposeOpened;

    // CONSTRUCTORS ---------------------------------------------------------
    /**
     * Constructor for 'Expose' screen class.
     * 
     * @param screenFromWhichExposeOpened
     *            {@code BaseINScreen} from which expose opened
     */
    public ScreenExpose(BaseINScreen screenFromWhichExposeOpened) {
        this.screenFromWhichExposeOpened = screenFromWhichExposeOpened;
        
        waitForMe();
        verify();
    }

    public void waitForMe() {
        Assert.assertTrue("Cannot wait to open 'Expose'",
                DataProvider.getInstance().getSolo()
                        .waitForText(UPDATES_LABEL, 1, DataProvider.WAIT_DELAY_DEFAULT));
    }
    
    public void verify() {
        Assert.assertNotNull(
                "Error: there is null pointer to BaseINScreen during creation of 'Expose' screen",
                screenFromWhichExposeOpened);

        assertExposeMenuTextView(UPDATES_LABEL);
        assertExposeMenuTextView(YOU_LABEL);
        assertExposeMenuTextView(MESSAGES_LABEL);
        assertExposeMenuTextView(GROUPS_AND_MORE_LABEL);
        
        //TODO complete verification

        screenFromWhichExposeOpened.verifyINButton();
    }

    public BaseINScreen backToScreenFromWhichExposeOpened() {
        screenFromWhichExposeOpened.tapOnINButton();
        return screenFromWhichExposeOpened;
    }

    /**
     * Opens 'Updates' screen.
     * 
     * @return {@code ScreenUpdates} with just opened 'Updates' screen.
     */
    public ScreenUpdates openUpdatesScreen() {
        tapOnUpdatesButton();

        return new ScreenUpdates();
    }

    /**
     * Opens 'You' screen.
     * 
     * @return {@code ScreenYou} with just opened 'You' screen.
     */
    public ScreenYou openYouScreen() {
        tapOnYouButton();

        return new ScreenYou();
    }

    /**
     * Opens 'Messages' screen.
     * 
     * @return {@code ScreenInbox} with just opened 'Messages' screen.
     */
    public ScreenInbox openMessagesScreen() {
        tapOnMessagesButton();

        return new ScreenInbox();
    }

    /**
     * Opens 'Groups & More' screen.
     * 
     * @return {@code ScreenGroupsAndMore} with just opened 'Groups & More'
     *         screen.
     */
    public ScreenGroupsAndMore openGroupsAndMoreScreen() {
        tapOnGroupsAndMoreButton();

        return new ScreenGroupsAndMore();
    }

    /**
     * Taps on 'Updates' {@code TextView}.
     */
    public void tapOnUpdatesButton() {
        tapOnExposeMenuTextView(UPDATES_LABEL);
    }

    /**
     * Taps on 'You' {@code TextView}.
     */
    public static void tapOnYouButton() {
        tapOnExposeMenuTextView(YOU_LABEL);
    }

    /**
     * Taps on 'Messages' {@code TextView}.
     */
    public void tapOnMessagesButton() {
        tapOnExposeMenuTextView(MESSAGES_LABEL);
    }

    /**
     * Taps on 'Groups & More' {@code TextView}.
     */
    public void tapOnGroupsAndMoreButton() {
        tapOnExposeMenuTextView(GROUPS_AND_MORE_LABEL);
    }

    /**
     * Taps on {@code TextView} that has specified {@code textViewText}.
     * 
     * @param textViewText
     *            {@code TextView} text
     */
    private static void tapOnExposeMenuTextView(String textViewText) {
        assertExposeMenuTextView(textViewText);
        Solo solo = DataProvider.getInstance().getSolo();
        TextView textView = solo.getText(textViewText);
        Logger.i("Tapping on '" + textViewText + "' TextView");
        solo.clickOnView(textView);
    }

    /**
     * Verifies that {@code TextView} with specified {@code textViewText} is
     * presented on 'Expose' screen.
     * 
     * @param textViewText
     *            {@code TextView} text
     */
    private static void assertExposeMenuTextView(String textViewText) {
        Solo solo = DataProvider.getInstance().getSolo();
        TextView textView = solo.getText(textViewText);
        Assert.assertNotNull("'" + textViewText + "' TextView not present", textView);
        Assert.assertTrue("'" + textViewText + "' TextView not shown", textView.isShown());
    }

}
